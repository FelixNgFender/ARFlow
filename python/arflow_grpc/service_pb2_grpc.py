# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from arflow_grpc import service_pb2 as arflow__grpc_dot_service__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in arflow_grpc/service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ARFlowStub(object):
    """The ARFlow service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/arflow.ARFlow/RegisterClient',
                request_serializer=arflow__grpc_dot_service__pb2.ClientConfiguration.SerializeToString,
                response_deserializer=arflow__grpc_dot_service__pb2.ClientIdentifier.FromString,
                _registered_method=True)
        self.ProcessFrame = channel.unary_unary(
                '/arflow.ARFlow/ProcessFrame',
                request_serializer=arflow__grpc_dot_service__pb2.DataFrame.SerializeToString,
                response_deserializer=arflow__grpc_dot_service__pb2.Acknowledgement.FromString,
                _registered_method=True)


class ARFlowServicer(object):
    """The ARFlow service definition.
    """

    def RegisterClient(self, request, context):
        """Registers a client with the given specifications.

        The client is registered with the server and is assigned a unique identifier.
        The client can then send data frames to the server using the assigned identifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessFrame(self, request, context):
        """Accepts a data frame from a client, returning an acknowledgment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ARFlowServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=arflow__grpc_dot_service__pb2.ClientConfiguration.FromString,
                    response_serializer=arflow__grpc_dot_service__pb2.ClientIdentifier.SerializeToString,
            ),
            'ProcessFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessFrame,
                    request_deserializer=arflow__grpc_dot_service__pb2.DataFrame.FromString,
                    response_serializer=arflow__grpc_dot_service__pb2.Acknowledgement.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arflow.ARFlow', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('arflow.ARFlow', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ARFlow(object):
    """The ARFlow service definition.
    """

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arflow.ARFlow/RegisterClient',
            arflow__grpc_dot_service__pb2.ClientConfiguration.SerializeToString,
            arflow__grpc_dot_service__pb2.ClientIdentifier.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arflow.ARFlow/ProcessFrame',
            arflow__grpc_dot_service__pb2.DataFrame.SerializeToString,
            arflow__grpc_dot_service__pb2.Acknowledgement.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
