syntax = "proto3";

option csharp_namespace = "ARFlow";

// The ARFlowService service definition.
service ARFlowService {
    // Registers a device with the given specifications.
    rpc register(RegisterRequest) returns (RegisterResponse);

    // Sends a data frame from a device.
    rpc data_frame(DataFrameRequest) returns (DataFrameResponse);
}

message RegisterRequest {
    string device_name = 1;

    message CameraIntrinsics {
        float focal_length_x = 1;
        float focal_length_y = 2;

        float principal_point_x = 3;
        float principal_point_y = 4;

        int32 resolution_x = 5;
        int32 resolution_y = 6;
    }
    CameraIntrinsics camera_intrinsics = 2;

    message CameraColor {
        bool enabled = 1;

        string data_type = 2;
        float resize_factor_x = 3;
        float resize_factor_y = 4;
    }
    CameraColor camera_color = 3;

    message CameraDepth {
        bool enabled = 1;

        string data_type = 2;
        int32 confidence_filtering_level = 3;

        int32 resolution_x = 4;
        int32 resolution_y = 5;
    }
    CameraDepth camera_depth = 4;

    message CameraTransform {
        bool enabled = 1;
    }
    CameraTransform camera_transform = 5;

    message CameraPointCloud {
        bool enabled = 1;
        float depth_upscale_factor = 2;
    }
    CameraPointCloud camera_point_cloud = 6;

    message CameraPlaneDetection {
        bool enabled = 1;
    }
    CameraPlaneDetection camera_plane_detection = 7;

    message Gyroscope {
        bool enabled = 1;
    } 
}

message RegisterResponse {
    string uid = 1;
}

message DataFrameRequest {
    string uid = 1;
    bytes color = 2;
    bytes depth = 3;
    bytes transform = 4;

    message Vector3 {
        float x = 1;
        float y = 2;
        float z = 3;
    }

    message PointInCloud {
        Vector3 point = 1;
        float confidence = 2;
    }
    repeated PointInCloud point_cloud = 5;

    message Vector2 {
        float x = 1;
        float y = 2;
    }
    message Planes {
        Vector3 center = 1;
        Vector3 normal = 2;
        Vector2 size = 3;
    }
    repeated Planes plane_detection = 6;
    

    message Quaternion {
        float x = 1;
        float y = 2;
        float z = 3;
        float w = 4;
    }

    Quaternion gyroscope_attitude = 7;
    Vector3 gyroscope_rotation_rate = 8;
    Vector3 gyroscope_gravity = 9;
    Vector3 gyroscope_acceleration = 10;
}

message DataFrameResponse {
    string message = 1;
}
